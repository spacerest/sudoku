{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf160
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red255\green0\blue0;\red255\green204\blue102;\red128\green0\blue64;
\red0\green64\blue128;\red153\green153\blue153;\red255\green0\blue255;\red204\green102\blue255;\red128\green0\blue255;
\red255\green83\blue8;\red102\green255\blue255;\red204\green255\blue102;\red102\green255\blue102;\red0\green0\blue255;
}
\margl1440\margr1440\vieww13580\viewh13900\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 /* - - - - - regular grid - - - - - - */\
\

\fs28 /* #1 */ append a variable \cf2 grid \cf0 to the body of your dom. when you look to see what \cf2 grid\cf0  is, you see it's a variable which returns the result of a function \cf3 clickableGrid\cf0 .\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
/* #2 */ when running \cf3 clickableGrid\cf0 , you check for three parameters: \cf4 rows\cf0 , \cf5 cols\cf0 , and \cf6 callback\cf0 . You declare a new local variable \cf7 \ul \ulc7 iii \cf0 \ulnone as equal to zero. You declare a new local variable \cf8 localGrid,\cf0  which holds a newly created element "table," which belongs to the dom. You give this \cf8 localGrid \cf0 a classname of "grid."\
\
	/* a */ you start up a new loop which runs between a new variable \cf9 \ul \ulc9 rrr \cf0 \ulnone = 0 and the number of rows passed into the \cf3 clickableGrid\cf0  function. \cf9 \ul rrr \cf0 \ulnone increases pre-incrementally by 1 each time this loop runs. Each time, make a new variable \cf10 \ul \ulc10 tr\cf0 \ulnone , which holds a newly created element tr which is appended as a child to the \cf8 localGrid\cf0 . You run the next loop /* b */.\
\
	/* b */ you start up a new loop which runs between a new variable \cf11 \ul \ulc11 ccc\cf0 \ulnone  \cf9 \ul \ulc9  \cf0 \ulnone = 0 and the number of rows passed into the \cf3 clickableGrid\cf0  function. \cf11 \ul \ulc11 ccc\cf0 \ulnone  \cf9 \ul \ulc9  \cf0 \ulnone increases pre-incrementally by 1 each time this loop runs. Each time, make a new variable \cf12 cell\cf0 , which holds a newly created element td which is appended as a child to the \cf10 \ul \ulc10 tr\cf0 \ulnone . Set the innerHTML of each \cf12 cell\cf0  as \cf7 \ul \ulc7 iii\cf0 \ulnone  + 1 (increasing pre-incrementally, which means it will start at 1 as it was initially set at 0). Add a new event listener to each cell that reacts to the "click" event" and runs an anonymous function which takes \cf12 cell\cf0 ,\cf9 \ul \ulc9 rrr\cf0 \ulnone ,\cf11 \ul \ulc11 ccc\cf0 \ulnone , and \cf7 \ul \ulc7 iii \cf0 \ulnone as parameters. This anonymous function runs another anonymous function to pass down \cf13 el\cf0 ,\cf9 \ul \ulc9 rrr\cf0 \ulnone ,\cf11 \ul \ulc11 ccc\cf0 \ulnone , and \cf7 \ul \ulc7 iii\cf0 \ulnone  as placeholder (?) parameters and returns the \cf6 callback\cf0 , to again pass down \cf13 el\cf0 ,\cf9 \ul \ulc9 rrr\cf0 \ulnone ,\cf11 \ul \ulc11 ccc\cf0 \ulnone , and \cf7 \ul \ulc7 iii\cf0 \ulnone  as placeholder (?) parameters. It seems like it doesn't matter what these four parameters are as long as they match each other. It seems like the event listener we've added is the click, which runs a function whose main purpose is to assign a className of "clicker" to the most recently clicked cell/element. If the variable l\cf14 astClicked\cf0  is not defined, just assign it as the new \cf13 element\cf0 , which has been given a className of "clicker." If it is defined, first give the previous l\cf14 astClicked \cf0 a new classname of null and make the new \cf14 lastClicked \cf0 the new \cf13 element\cf0 .\
\
\
addEventListener(event,(function)(parameters),true/false)\
\

\fs72 /* - - - - sudoku grid layout - - - - - */
\fs28 \
\
what do we need? \
\
**a 9 X 9 grid with two kinds of cells -- ones that can't be edited with their value printed in the innerHTML, and ones that don't have their value printed (but have the value stored) and can be edited one at a time. each cell can have both a value and a classname, right? first, though, make a grid that meets sudoku standards:\
	*each 3X3 square only has each number 1nce\
	*each row has each number 1nce\
	*each column has each number 1nce\
\
row 1 col 1 item 1 = unit 1 3 / row = 3 \
row 1 col 2 item 2 = unit 1\
row 1 col 3 item 3 = unit 1\
row 1 col 4 item 4 = unit 2\
\
x = row\
y = column\
\
item = (x-1)*9 + y; // how to determine item # without the loop through\
\
//now i want to figure out how to determine unit number (units are the 3X3 squares)\
\
1,1 1,2 1,3 2,1 2,2 2,3 3,1 3,2 3,3 ==== 1   9x/9 , 9y/9\
\
4,1 4,2 4,3 5,1 5,2 5,3 6,1 6,2 6,3 ==== 2\
\
7,1 7,2 7,3 8,1 8,2 8,3 9,1 9,2 9,3 ==== 3\
\
1,4 1,5 1,6 2,4 2,5 2,6 3,4 3,5 3,6 ==== 4\
\
4,4 4,5 4,6 5,4 5,5 5,6 6,4 6,5 6,6 ==== 5\
\
7,4 7,5 7,6 8,4 8,5 8,6 9,4 9,5 9,6 ==== 6\
\
1,7 1,8 1,9 2,7 2,8 2,9 3,7 3,8 3,9 ==== 7\
\
4,7 4,8 4,9 5,7 5,8 5,9 6,7 6,8 6,9 ==== 8\
\
7,7 7,8 7,9 8,7 8,8 8,9 9,7 9,8 9,9 ==== 9\
\
9					9					9\
8					8					8\
7					7					7\
6					6					6\
5					5					5\
4  					4					4\
3 .  .  .				3             .   .   .			3                          .   .   .\
2 .  .  .				2             .   .   .			2                          .   .   .\
1 .  .  .				1             .   .   .			1                          .   .   .\
  1  2  3  4  5  6  7  8  9   	   1  2  3  4  5  6  7  8  9   	    1  2  3  4  5  6  7  8  9            if (	\
  \
\
9					9					9\
8					8					8\
7					7					7\
6 .  .  .				6	    .   .   .			6                          .   .   .\
5 .  .  .				5	    .   .   .			5                          .   .   .\
4 .  .  .				4	    .   .   .			4                          .   .   .\
3 					3            				3                         \
2 					2           				2                         \
1 					1           				1                          \
  1  2  3  4  5  6  7  8  9   	   1  2  3  4  5  6  7  8  9   	    1  2  3  4  5  6  7  8  9 \
\
\
9 .  .  .				9	    .   .   .			9                          .   .   .\
8 .  .  .				8	    .   .   .			8                          .   .   .\
7 .  .  .				7	    .   .   .			7                          .   .   .\
6					6					6\
5					5					5\
4  					4					4\
3 					3            				3                        \
2					2           				2                        \
1					1           				1                         \
  1  2  3  4  5  6  7  8  9   	   1  2  3  4  5  6  7  8  9   	    1  2  3  4  5  6  7  8  9 \
\
9 total options... \
\
\
\
\
\
\
}